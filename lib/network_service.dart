import 'dart:convert';import 'package:dio/dio.dart';import 'interseptor.dart';// ignore_for_file: non_constant_identifier_namesclass NetworkService {  static const String token = "5754245968:AAF2OgO0iRz34ZN2yCQ7VAy8eWA4gS17zoo";  static const String TELEGRAM_CHAT_ID =  "-1001842351599"; /// Base Url */  static const bool isTester = true;   static const String SERVER_DEVELOPMENT = "https://web-production-5638.up.railway.app";   static const String SERVER_PRODUCTION = "https://web-production-5638.up.railway.app";  static  String get baseApiUrl {    if (isTester) return SERVER_DEVELOPMENT;    return SERVER_PRODUCTION;  }  /// Apis */  static const String API_LIST = "";  static const String API_SITES = "/api/sites";  static const String API_LINKS = "/api/social-networks";  static const String API_CATEGORIES = "/api/categories/categories";  static const String API_PRODUCT_Status = "/api/status-products/getAll";  static const String API_ALL_DATA = "/api/products/getAll";  static const String APi_GET_BYCategory = "/api/products/getByCategory";  static const String APi_GET_BY_Status = "/api/products/getByStatus";  static const String APi_POST_REQUEST_CALL = "/api/consultations/create";  static const String APi_POST_ORDER_CREATE = "/api/orders/create";  static const String APi_TELEGRAM_BOT= "/bot$token/sendMessage";  // {ID}  /// Headers */  static  Map<String, String> get headers {    Map<String, String> headers = {       'Accept': '*/*',      'Content-Type': 'application/json',      'Charset': 'utf-8',      // 'Accept-Version': 'api',    };    return headers;  }  static Map<String, String> get headersMultipart {    Map<String, String> headers = {       'Accept': '*/*',      'Content-Type': 'multipart/form-data',      'application':'x-www-form-urlencoded\r\n',    };    return headers;  }  /// BaseOptions */  static final BaseOptions _baseDioOptions = BaseOptions(    baseUrl: baseApiUrl,    headers: headers,    connectTimeout: const Duration(seconds: 4),    receiveTimeout: const Duration(seconds: 4),   // contentType: 'application/json;charset=utf-8',    responseType: ResponseType.json,  );  static final Dio _dio = Dio(_baseDioOptions)..interceptors.add(DioInterceptor());  /* Dio Requests */  static Future GET(String api, Map<String, dynamic> params) async {    Response response = await _dio.get(api, queryParameters: params);    print("response.requestOptions.path :: ${response.requestOptions.path}");    print(response.statusMessage);    print(response.data);    if (response.statusCode == 200 || response.statusCode == 201) {      return response.data;    }print(response.statusCode);    return null;  }  static Future POST(String api, Map<String, dynamic> body) async {    Response response = await _dio.post(api, data: jsonEncode(body) );    return response;  }  static Future<Map<String, dynamic>?> PUT(String api, Map<String, dynamic> params) async {    Response response = await _dio.put(api, data: params); // http or https    if (response.statusCode == 200 || response.statusCode == 201) {      return response.data;    }    return null;  }  static Future<Map<String, dynamic>?> SENDTELEGRAMBOT(      String api, Map<String, String> params) async {    _dio.options.baseUrl = "https://api.telegram.org";    Response response = await _dio.post(api,queryParameters: params); // http or    // https    if (response.statusCode == 200 || response.statusCode == 201) {      return response.data;    }    return null;  }  /// Dio Query Params */  static Map<String, String> paramsEmpty() {    Map<String, String> params = {};    return params;  }  /// Dio Body */  static Map<String, dynamic> bodyCreate(dynamic post) {    Map<String, dynamic> params = {};    params.addAll({      'title': post.title,      'body': post.body,      'userId': post.userId,    });    return params;  }  /// Dio Parsing */  static List<dynamic> parsePostList(List json) {    //  var data = List<dynamic>.from(json.map((x) => dynamic.fromJson    //  (x)));    return [];  }}